import numpy as np
import re
#------------------------------------------------------------------------------
#   Direct diagonalization of quantum mechanical anharmonic oscillator
#------------------------------------------------------------------------------
#   hamiltonian m/2(\dot x)^2+k(x^2-f^2)^2, units 2m=k=1.                      
#------------------------------------------------------------------------------
#   harmonic oscillator: H_0=m/2(\dot x)^2+m/2*w^2x^2
#   perturbation:        H_1=A*x^4+B*x^2+C  
#------------------------------------------------------------------------------
#   Input:
#------------------------------------------------------------------------------
#   f       minimum of harmonic oxillator: (x^2-f^2)^2
#   n       number of lattice points in the euclidean time direction (n=800)
#   w0      unperturbed oscillator frequency (w0 = 4f))
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#   open file
#------------------------------------------------------------------------------
file16 = open('Data/qmdiag/spectrum.dat', 'w')

#------------------------------------------------------------------------------
#   input parameters                                                                 
#------------------------------------------------------------------------------
# open the file for reading
with open('parameters.txt', 'r') as file:
    # read the contents of the file
    contents = file.read()
   
# search for the values
ndim = re.search(r'ndim\s*=\s*(\d+)', contents).group(1)
w0   = re.search(r'w0\s*=\s*(\d+\.\d+)', contents).group(1)

# convert the values to integers and floats
ndim = int(ndim)
w0   = float(w0)
f    = 0.0

for i in range(20):
    #------------------------------------------------------------------------------
    #     initialize                                                  
    #------------------------------------------------------------------------------
    eps = 1.e-30
    pi = np.pi
    
    taumax = 2.5
    ntau = 100
    dtau = taumax / float(ntau)

    xmax = 2.0 * f
    nx = 100
    dx = 2.0 * xmax / float(nx)

    m = 0.5
    w = w0
    
    a = 1.0
    b = -2.0 * f**2 - w**2 / 4.0
    c = f**4
    
    cw = 1.0 / np.sqrt(m*w)

    c22 = cw**2/2.0
    c44 = cw**4/4.0

    h      = np.zeros((ndim, ndim))
    e      = np.zeros(ndim)
    v      = np.zeros((ndim, ndim))
    rho    = np.zeros(ndim)
    rho2   = np.zeros(ndim)
    rho3   = np.zeros(ndim)

    #------------------------------------------------------------------------------
    #     Build up Hamiltonian matrix h
    #------------------------------------------------------------------------------
    for n in range(ndim):
        #--------------------------------------------------------------------------
        #     <n|h|n>                                           
        #--------------------------------------------------------------------------
        x4 = c44 * 3.0 * ((n + 1) ** 2 + n ** 2)
        x2 = c22 * (2 * n + 1)
        e0 = w * (n + 0.5) + c
        h[n, n] = a * x4 + b * x2 + e0
        #--------------------------------------------------------------------------
        #     <n|h|n+2>                                           
        #--------------------------------------------------------------------------
        if n + 2 < ndim:
            x4 = c44 * np.sqrt((n + 1.0) * (n + 2)) * (4 * n + 6)
            x2 = c22 * np.sqrt((n + 1.0) * (n + 2))
            hh = a * x4 + b * x2
            h[n, n + 2] = hh
            h[n + 2, n] = hh
        #--------------------------------------------------------------------------
        #     <n|h|n+4>                                           
        #--------------------------------------------------------------------------
        if n + 4 < ndim:
            x4 = c44 * np.sqrt((n + 1.0) * (n + 2) * (n + 3) * (n + 4))
            hh = a * x4
            h[n, n + 4] = hh
            h[n + 4, n] = hh
    #------------------------------------------------------------------------------
    #     Diagonalize h and sort the eigenvalues and eigenvectors in ascending
    #     order and removing non physical values
    #------------------------------------------------------------------------------
    e, v = np.linalg.eigh(h)

    sorted_indices = np.argsort(e)
    e = e[sorted_indices]
    v = v[:, sorted_indices]

    #------------------------------------------------------------------------------
    #     Write data                                          
    #------------------------------------------------------------------------------
    for k in range(6):
        file16.write(f"{e[k]:.5f}" + ' ')
    file16.write('\n')
    f += 0.1
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
file16.close()
